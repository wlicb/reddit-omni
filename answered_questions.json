{
  "1j8bd2n": {
    "title": "What are the best linters and language servers for python?",
    "body": "All of the different language servers, linters, and formatters available for Python can be very confusing. There is significant overlap between tools and it's hard to know what is what- this is my attempt to sort through it all.  \n\\\nBelow is what I have been able to figure out, corrections and additions added as I see them from the comments.\\\n\\\n[Ruff](https://github.com/astral-sh/ruff) is a fast linter / code formatter. It has overtaken [Black](https://github.com/psf/black) and [Flake8](https://flake8.pycqa.org/en/latest/) as the best / most popular linter although not as thourough as Pylint. Rust.\\\n\\\n[JEDI](https://jedi.readthedocs.io/en/latest/) is a static analysis tool that supports autocompletion, goto, and refactoring. It works with several langauge servers. Similar functionality to Pyright. Python.\n  \n[Pyright](https://github.com/microsoft/pyright) is a language server maintained by Microsoft. It supports type checking (primary function), goto, autocomplete, similar to JEDI. It is written in TypeScript. Pylance is a Microsoft product that builds on Pyright and adds additional feataures to VS Code. TypeScript.  \n  \n[Basedpyright](https://github.com/DetachHead/basedpyright) is a fork of Pyright to add Pylance functionality to Pyright for non-Microsoft editors. Mostly TypeScript with Python additions.\n  \n[MyPy](https://www.mypy-lang.org/) is one of the original static type checkers (2012, but still actively maintained). Python.\\\n\\\n[PyLSP/Python LSP Server](https://github.com/python-lsp/python-lsp-server) is a language server implementation that interfaces with other libraries like JEDI to provide various LSP functionality. Python.\\\n\\\n[Pylint](https://pylint.readthedocs.io/en/latest/) is a static code analyser and very thorough (and slow) linter. It can be used alongside other analysis tools like Ruff or Black, and mypy or pyright. Python.\\\n\\\nIn addition to the above, some commercial IDEs like PyCharm use their own proprietary linters and type checkers.\\\n\\\nI use the [Helix](https://helix-editor.com) editor and by default it will use Ruff, JEDI, and pylsp together. I was confused why it used more than one language server/library, which was the motivation for looking into all of this.\n",
    "url": "https://www.reddit.com/r/Python/comments/1j8bd2n/",
    "answer": "The best linters and language servers for Python are:\n- **Ruff**: A fast linter/code formatter surpassing Black and Flake8.\n- **JEDI**: A static analysis tool supporting autocompletion, goto, and refactoring.\n- **Pyright**: Maintained by Microsoft, provides type checking, goto, and autocomplete features.\n- **Basedpyright**: A fork of Pyright adding Pylance functionality for non-Microsoft editors.\n- **MyPy**: An original static type checker actively maintained since 2012.\n- **PyLSP/Python LSP Server**: Interfaces with libraries like JEDI to offer various LSP functionalities.\n- **Pylint**: A thorough but slow static code analyzer and linter.\nCommercial IDEs like PyCharm use their proprietary linters and type checkers."
  },
  "1j8qdqa": {
    "title": "I built a simple Terminal UI for pytest, feedback welcome!",
    "body": "# What My Project Does\n\nI missed an easy, simple and quick way to run pytests in the terminal.\n\nLink to project:Â [https://github.com/0-sv/pytesttui](https://github.com/0-sv/pytesttui).\n\nMy project lets you run \\`pytesttui\\` in your terminal. After opening, it shows you a tree of all your tests in the tests directory. Still in an early stage, so all it does is if you hit \"r\" and selected your test, it will run it. It scaled in the repository I use at work which contains about 500 tests. It is more efficient than running it in an IDE because it runs instantly, which is why I like terminal UIs.\n\nIf you'd like to try it and you have a Macbook, then visit my github page and download the release. Extract the files and place it in a PATH location like \\~/.local/bin. You will probaby have to accept a security warning by MacOS, which is done by browsing to the \"Privacy & Security\" tab in settings and clicking on \"Allow anyway\" after running it. Make sure \\`pytest\\` is also accessible in a PATH location or installed using pip.\n\n# Target Audience\n\nThis is meant as a toy project and just to get some feedback, and if there's enough attention, then I will keep developing it.\n\n# Comparison\n\nThere are alternatives like in VSCode extensions and Jetbrains products, but in my opinion they miss the simplicity and convenience of a terminal UI. The VSCode extension has been bugging me the most (Test Explorer), because for some reason it doesn't exit any Python debug scripts that you run and keeps it running in the background, forcing me to kill them every time with Activity Monitor on MacOS. Pycharm also has a test runner, but it doesn't show you a tree of all your tests (AFAIK).",
    "url": "https://www.reddit.com/r/Python/comments/1j8qdqa/",
    "answer": "Your project, pytesttui, sounds like a great solution for running pytest in the terminal with simplicity and efficiency. It's fantastic that it allows users to view a tree of all tests and run them instantly. Terminal UIs can indeed offer a more efficient testing process compared to IDEs. Your detailed instructions for Macbook users on how to download and set it up are very helpful. It's great that you are open to feedback and looking to further develop the project based on the response. Keep up the good work!"
  },
  "1j8fq15": {
    "title": "Javascript and python interfacing examples",
    "body": "Examples of interfacing between javascript and python for desktop apps and desktop games.\n\n[https://github.com/non-npc/Javascript-and-python-interfacing-examples](https://github.com/non-npc/Javascript-and-python-interfacing-examples)",
    "url": "https://www.reddit.com/r/Python/comments/1j8fq15/",
    "answer": "One way to interface between JavaScript and Python for desktop apps and games is by using tools like Electron (for desktop apps) and Pygame (for games). Electron allows you to build cross-platform desktop applications using web technologies like HTML, CSS, and JavaScript, while Pygame is a set of Python modules designed for writing games. You can use Electron's IPC (Inter-Process Communication) module to communicate between the JavaScript front-end and a Python back-end. Similarly, for games, Pygame provides functions for handling graphics, sound, and input that can be integrated with a JavaScript front-end. You can check out the examples and resources on the GitHub link provided for more detailed guidance on how to do this."
  },
  "1j9196v": {
    "title": "I didn't want to go, but PyCharm finally drove me into the arms of VSCode, after 5+ years.",
    "body": "I just switched to VSCode after well over five years with PyCharm. I didn't want to do it, but I just can't stand it anymore.\n\n**Things I love about PyCharm and will miss**\n\n1. The refactoring functionality. VSCode's Python extension has that too, but it isn't as nice. \n\nAt this point, that's pretty much it.\n\n**Things that drove me nuts**\n\n1. IdeaVim. It actually got better recently, but for years and years, the undo function was busted, so you had to hit `u` over and over to undo what in real vim is a single operation. VSCode's neovim plugin uses actual neovim under the hood, which is obviously so much more robust and faithful, while IdeaVim will never be a full implementation.\n2. The gradual accumulation of simple bugs that never get fixed.\n3. It's so slow. I didn't appreciate just how slow until I switched over to VSCode. I mean, holy crap, it's 10x faster for a lot of things (opening a project, installing or restarting extensions, for example).\n\nHere are the bugs that have bugged me the worst:\n\nThe \"usages\" window (cmd-click on a definition, see where it's used) constantly resizes itself too small. It's been a problem for years. They won't fix the way autosize works, OR let us turn it off. Plus you have to get your mouse cursor nearly pixel-perfect to resize it yourself, so you can see the whole code preview. Then the very next time you use it, it's back to its stupidly narrow size.\n\n**Type inference is busted.** \n\nIf you do something as standard as this, you get a type error on `f`, saying \"Expected type 'SupportsWrite[bytes]', got 'BufferedWriter' instead\":\n\n    with open(filename, \"wb\") as f:\n        pickle.dump(obj, f)\n\nAnd I can't just disable the \"unexpected type\" code inspection--it's probably the single most valuable one. So I'm stuck with a lot of my files showing warnings that shouldn't be there. Which also keeps me from using the keyboard shortcut to bounce to any real problem of a lower severity.\n\nIf you're doing a comprehension inside a class method, and you name the iteration variable the same as a class attribute (e.g., you have `myclass.name`, and you do a comprehension like `[ ... for name in names]`, then the inferred type of the iteration variable overwrites the inferred type of the class attribute. This makes no sense--`name` and `self.name` have nothing to do with one another. This one is easy enough to work around by appending an underscore to the iteration variable's name, but it indicates something is very wrong under the hood.\n\nThere are several more specific type inference problems in my codebase, where my method clearly returns `MyType`, but PyCharm infers it as `MyType | None` and throws a warning. The method cannot possibly return `None`, and `mypy` agrees with me. So I'm stuck with another spurious warning.\n\nThese problems just never, ever get fixed, and they keep on accruing. Add it to the fact that JetBrains IDE's are always second in line for addon support, and I just couldn't justify sticking with it.\n\nThanks for coming to my talk, sorry I went over time.",
    "url": "https://www.reddit.com/r/Python/comments/1j9196v/",
    "answer": "It sounds like you made the switch from PyCharm to VSCode after being with PyCharm for over five years. You mentioned loving PyCharm's refactoring functionality, but finding the speed and certain bugs frustrating. One of the bugs that bothered you was the resizing issue with the \"usages\" window. Also, you mentioned type inference problems, like getting type errors on standard operations and incorrect type inferences in certain scenarios.\n\nVSCode seems to have addressed some of these issues for you, offering faster performance and better integration with plugins like neovim. The decision to switch ultimately came down to a combination of factors like performance, bug fixes, and plugin support. It's great that you found a new environment that better suits your needs!"
  },
  "1j8yyc0": {
    "title": "Turtle.py app to demo RGB color values",
    "body": "* What My Project Does\n\nI've been working on turtle-related projects and I needed a simple, interactive, single-file Python program to explain RGB color values. I wrote this one up as part of my work writing [a Simple Turtle Tutorial written in Wikipedia-style Simple English](https://github.com/asweigart/simple-turtle-tutorial-for-python/) so it can be translated to non-English languages.\n\nThe app has three sliders for the amount of red, blue, and green for the window's background color. The RGB values are presented under the sliders for the 0.0 to 1.0 scale, 0 to 255 scale, and hexadecimal 0x00 to 0xFF scale. You can drag the sliders or click on the slider lines directly. There are also 14 preset color buttons along the top to click on.\n\n\n\nPyPI page: https://pypi.org/project/turtlecolors/\n\nGitHub repo: https://github.com/asweigart/turtlecolors\n\nInstall with `python -m pip install turtlecolors` on Windows or `python3 -m pip install turtlecolors` on macOS/Linux.\n\nRun with `python -m turtlecolors` on Windows or `python3 -m turtlecolors` on macOS/Linux. Or run the code `import turtlecolors;turtlecolors.main()`\n\nWhen the program first runs, it also prints out the color name strings that Python's turtle module uses. Unlike other lists of color names, I actually checked my list against the turtle.py to make sure they're correct. (I'm pretty sure clickbait articles just use chatgpt to generate their lists.)\n\n* Target Audience\n\nPeople who teach coding using turtle.py or anyone curious as to how turtle.py can create small GUI apps.\n\n* Comparison\n\nThis is written as a single-file Python program using only the standard library. Unlike similar web apps, it's simple and doesn't have ads. If you have Python installed, you can run this program and learn about RGB values. Simple as that.",
    "url": "https://www.reddit.com/r/Python/comments/1j8yyc0/",
    "answer": "This Turtle.py app is designed to help you understand RGB color values through an interactive Python program. It includes sliders for red, blue, and green components, presenting RGB values in different scales. You can adjust the sliders or use preset color buttons. The program also displays color name strings used by Python's turtle module. It's a simple tool for those teaching coding with turtle.py or anyone interested in creating small GUI apps. You can find the app on PyPI and GitHub for installation and usage instructions."
  }
}